########################################
##  .zshrc.local to complement
##    grml's .zshrc
##    by fa[at]art-core.org
## ported from .bashrc 0.91, 2011-08-09
########################################
## 2012-03-25
my_version='1.1'
########################################

## grml defaults
if [ -f ~/code/dotfiles/.zshrc.base ]; then
    source ~/code/dotfiles/.zshrc.base
fi

## host-specific stuff, purely optional
if [ -f ~/.ssh/.profile.host ]; then
    source ~/.ssh/.profile.host
fi

########################################
## aliases
##
alias cp='cp -i -r'
alias df='df -h'
alias du='du -h'
alias dum='du --max-depth=1'
alias gp='git pull'
alias gpp='git pull && git push'
alias ls="/bin/ls -b -CF --color=none"
alias l="ls -lF --color=auto"
alias ll="ls -lhAF --color=auto"
alias px='ps aux | grep -v "ps aux" | grep -v "grep --color" | grep'
alias rm='rm -i'
alias sudo="sudo -H -i"
alias ..="cd .."
alias ...="cd ../.."
which ack >/dev/null 2>&1 && alias ack='ack-grep'
which vim >/dev/null 2>&1 && alias vi='vim'

my_uname=`which uname`

########################################
## shell settings
########################################
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=1048576
export SAVEHIST=$HISTSIZE
export HISTTIMEFORMAT="%F %T"
########################################
setopt append_history
setopt extended_history
setopt hist_find_no_dups
setopt hist_ignore_all_dups
setopt hist_no_store
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt hist_verify
setopt interactivecomments
setopt login
setopt monitor
setopt notify
setopt share_history
# disables the use of Ctrl-D to exit the shell
set -o ignoreeof
# emacs bindings
bindkey -e

########################################
## functions
########################################
function my_vers() {
    echo -e ".zshrc.local by fa, version ${my_version}"
}

# battery level information
function w500bat {
    # system-specific stuff
    bat="/sys/class/power_supply/BAT0/"
    full="energy_full"
    now="energy_now"

    # calculate level
    _full=$( cat ${bat}${full} )
    _now=$( cat ${bat}${now} )
    fillint=`echo "scale=0; $_now*100/$_full" | bc`
    fillfloat=`echo "scale=2; $_now*100/$_full" | bc`

    # verbose version
    if [[ "$1" = '-v' ]]; then
        echo $_full
        echo $_now
    fi

    # colorized output
    if [[ "$fillint" -ge 75 ]]; then
        echo -n -e "${fg_bold[green]}"
    elif [[ "$fillint" -ge 25 ]]; then
        echo -n -e "${fg_bold[yellow]}"
    else
        echo -n -e "${fg_bold[red]}"
    fi

    echo -e "Battery: $fillint % remaining ${reset_color}"
}

# some system information
function ii() {
    local O_LANG=$LANG
    local O_LC_ALL=$LC_ALL
    local FQDN=`hostname -f`
    local MY_II_IF="$(/sbin/ifconfig | awk '/Link / { print $1 } ')"

    LANG=C
    LC_ALL=C

    echo -n -e "\n${reset_color}You are logged in to "
    echo -e "${fg_bold[red]}${HOST} ${fg_bold[yellow]}(${FQDN})${reset_color} - $(date)"
    echo -e "\n${fg_bold[red]}Kernel version:${reset_color} " ; uname -a
    echo -e "\n${fg_bold[red]}Users logged on:${reset_color} " ; w -h
    echo -e "\n${fg_bold[red]}Machine stats :${reset_color} " ; uptime
    echo -e "\n${fg_bold[red]}Memory stats :${reset_color} " ; free -m

    for my_if in ${=MY_II_IF}; do
        echo -e "\n${fg_bold[red]}Interface $my_if :${reset_color}" ;
        /sbin/ifconfig $my_if | awk '/inet / { print $2 } ' | cut -d ":" -f 2
        /sbin/ifconfig $my_if | awk '/inet6 / { print $3 } '
        /sbin/ifconfig $my_if | awk '/TX b/ { print "TX " $3 $4 " RX " $7 $8 } '
    done

    echo
    LANG=$O_LANG
    LC_ALL=$O_LC_ALL
}

########################################
## the prompt code in grml isn't really
##  pretty, so copy and adapt
########################################

EXITCODE="%(?..%?%1v )"
PS2='\`%_> '      # secondary prompt, printed when the shell needs more information to complete a command.
PS3='?# '         # selection prompt used within a select loop.
PS4='+%N:%i:%_> ' # the execution trace prompt (setopt xtrace). default: '+%N:%i>'

# don't use colors on dumb terminals (like emacs):
if [[ "$TERM" == dumb ]] ; then
    PROMPT="${EXITCODE}%n@%m %40<...<%B%~%b%<< "
else
    if [[ "x$UC" == "x" ]] ; then
        UC=$WHITE
    fi
    if [[ "x$HC" == "x" ]] ; then
        HC=$CYAN
    fi
    # This assembles the primary prompt string
    if (( EUID != 0 )); then
        PPRE="${RED}${EXITCODE}"
        PROMPT="${UC}%n${WHITE}@${HC}%m %40<...<${YELLOW}%3~%<< "
        PPOST="${BBLUE}$ ${NO_COLOUR}"
    else
        PPRE="${BLUE}${EXITCODE}"
        PROMPT="${UC}%n${WHITE}@${HC}%m %40<...<%B${BRED}%3~%b%<< "
        PPOST="${BWHITE}# ${NO_COLOUR}"
    fi
fi

PROMPT="${PPRE}${PROMPT}${PPOST}"
RPROMPT='${vcs_info_msg_0_}'

########################################
## os-specific stuff
##

isfreebsd(){
    [[ $OSTYPE == freebsd* ]] && return 0
    return 1
}

iscygwin(){
    [[ $OSTYPE == cygwin* ]] && return 0
    return 1
}

if [ isfreebsd ]; then
#    export TERM='cons25';
    alias ls='ls -hFG';
elif [ iscygwin ]; then
    for i in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
        alias $i:='cd /cygdrive/'$i;
    done;
#    bind 'set show-all-if-ambiguous off'             # Tab once for complete
fi

########################################
## exports
##
export GIT_EDITOR=vim
export EDITOR=vim
export CVS_RSH=ssh
export RSYNC_RSH=ssh

export PAGER=less
export LESS="-rX" # --quit-at-eof --raw-control-chars --no-init

locale -a | grep 'en_US.utf8' >/dev/null 2>&1 && export LANG='en_US.utf8'

zstyle :compinstall filename '/cygdrive/c/Users/Florian/.zshrc'
autoload -Uz compinit
compinit
zstyle ':completion:*' special-dirs true

export PATH=~/bin:${PATH}

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    export WORKON_HOME="~/.virtualenvs"
    source /usr/local/bin/virtualenvwrapper.sh
fi
